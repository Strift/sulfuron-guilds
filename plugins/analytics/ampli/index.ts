/* tslint:disable */
/* eslint-disable */
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull nuxt'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.0.0
 * Tracking Plan Version: 8
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/strift/Sulfuron%20Guilds/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/strift/Sulfuron%20Guilds/implementation/nuxt)
 */

import * as amplitude from '@amplitude/analytics-browser';

export type AmplitudeClient = typeof amplitude;

export type Environment = 'development' | 'production';

export const ApiKey: Record<Environment, string> = {
  development: '0d49ce6386219a0c60e57c1d713a206a',
  production: 'ccd672a208e44643d6dbb610b3fb9f16'
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: BrowserOptions = {
  plan: {
    version: '8',
    branch: 'main',
    source: 'nuxt',
    versionId: '1ff777d3-5720-4826-b9b5-88f790e5d2dd'
  }
};

export interface LoadOptions {
  environment?: Environment;
  disabled?: boolean;
  client?: {
    apiKey?: string;
    configuration?: BrowserOptions;
    instance?: AmplitudeClient;
  }
}

export interface IdentifyProperties {
  /**
   * Date of user sign up
   */
  signUpDate?: string;
}

export class Identify implements BaseEvent {
  event_type = 'Identify';

  constructor(
    public event_properties?: IdentifyProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class Group implements BaseEvent {
  event_type = 'Group';
}

export class SignIn implements BaseEvent {
  event_type = 'SignIn';
}

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: AmplitudeClient;

  get client(): AmplitudeClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options?: LoadOptions) {
    this.disabled = options?.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return;
    }

    const env = options?.environment ?? 'development';
    const apiKey = options?.client?.apiKey ?? ApiKey[env];

    if (options?.client?.instance) {
      this.amplitude = options?.client?.instance;
    } else if (apiKey) {
      this.amplitude = amplitude;
      return this.amplitude?.init(apiKey, undefined, { ...DefaultConfiguration, ...options?.client?.configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param properties The user properties.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    properties?: IdentifyProperties,
    options?: EventOptions,
  ) {
    if (!this.isInitializedAndEnabled()) {
      return;
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();
    const eventProperties = properties;
    if (eventProperties != null) {
      for (const [key, value] of Object.entries(eventProperties)) {
        amplitudeIdentify.set(key, value);
      }
    }
    return this.amplitude?.identify(
      amplitudeIdentify,
      options,
    );
  }

  /**
   * Set Group for the current user
   *
   * @param groupType The group type.
   * @param groupName The group name.
   */
  setGroup(groupType: string, groupName: string | string[]) {
    if (!this.isInitializedAndEnabled()) {
      return;
    }

    this.amplitude?.setGroup(groupType, groupName);
  }

  /**
   * Identify a group and set group properties.
   *
   * @param groupType The group type.
   * @param groupName The group name.
   * @param options Optional event options.
   */
  groupIdentify(
    groupType: string,
    groupName: string | string[],
    options?: EventOptions,
  ) {
    if (!this.isInitializedAndEnabled()) {
      return;
    }

    const amplitudeIdentify = new amplitude.Identify();
    return this.amplitude?.groupIdentify(groupType, groupName, amplitudeIdentify, options);
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions) {
    if (!this.isInitializedAndEnabled()) {
      return;
    }

    return this.amplitude?.track(event, undefined, options);
  }

  /**
   * SignIn
   *
   * [View in Tracking Plan](https://data.amplitude.com/strift/Sulfuron%20Guilds/events/main/latest/SignIn)
   *
   * A user signs in with Firebase authentication
   *
   * Owner: Laurent Cazanove
   *
   * @param options Amplitude event options.
   */
  signIn(
    options?: EventOptions,
  ) {
    return this.track(new SignIn(), options);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type BrowserOptions = amplitude.Types.BrowserOptions;

export type BaseEvent = amplitude.Types.BaseEvent;

export type IdentifyEvent = amplitude.Types.IdentifyEvent;
export type GroupEvent = amplitude.Types.GroupIdentifyEvent;
export type Event = amplitude.Types.Event;

export type EventOptions = amplitude.Types.EventOptions;
